Strategy Pattern
Purpose: The Strategy is a behavioral pattern. Its goal is to define a family of algorithms or behaviors, encapsulate each one in a separate class, and make them interchangeable at runtime.

Key Idea: Delegate the behavior to a separate "strategy" class that implements a common interface. The client can choose or switch strategies dynamically.

Use Case:

When you need multiple algorithms or behaviors for a task and want to swap them dynamically.
When the behavior should be defined in a configurable and reusable way.

Key Differences
Aspect	Factory Method	Strategy
Pattern Type	Creational	Behavioral
Primary Goal	Encapsulate object creation logic.	Encapsulate interchangeable behaviors.
Focus	What type of object to create.	What algorithm or behavior to use.
Runtime Behavior	Usually fixed after object creation.	Can change dynamically at runtime.
Client Role	Doesn't control which object is created.	Controls which strategy is used.
Example Scenario	A factory for creating different shapes.	Different sorting algorithms.
When They Overlap
While both can involve object creation:

Factory Method ensures the right object is created for the job.
Strategy ensures the right behavior is executed for the task.
If an objectâ€™s behavior depends on the type of object created, you might use Factory Method to create the object and Strategy to define its behavior. For example:

A payment gateway factory creates PayPalPayment or StripePayment objects (Factory Method).
Each payment object uses a different encryption algorithm (Strategy).